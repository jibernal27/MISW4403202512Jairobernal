{
	"info": {
		"_postman_id": "a011fb15-4f38-451c-9baf-1dddcaef138a",
		"name": "Restaurantes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2331986"
	},
	"item": [
		{
			"name": "Crear Restaurante valido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"restaurante_id\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Restaurante Italiano\",\n    \"direccion\": \"Calle 123 #45-67\",\n    \"tipoCocina\": \"Italiana\",\n    \"paginaWeb\": \"https://www.restauranteitaliano.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/restaurants/",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"restaurants",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Restaurante Invalido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"   pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Restaurante Italiano\",\n    \"direccion\": \"Calle 123 #45-67\",\n    \"tipoCocina\": \"Invalida\",\n    \"paginaWeb\": \"invalida\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/restaurants/",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"restaurants",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener todos los restaurantes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of restaurantes > ' + 0, function () {",
							"   var data = pm.response.json()",
							"   pm.expect(data.length).to.greaterThan(0)",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/restaurants/",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"restaurants",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener restaurante por id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/restaurants/:id/",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"restaurants",
						":id",
						""
					],
					"variable": [
						{
							"key": "id",
							"value": "{{restaurante_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener restaurante por id  que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message with UUID\", function () {",
							"    const data = pm.response.json();",
							"    const regex = /^Restaurante with id [0-9a-fA-F-]{36} not found$/;",
							"",
							"    pm.expect(data.message).to.match(regex);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/restaurants/:id/",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"restaurants",
						":id",
						""
					],
					"variable": [
						{
							"key": "id",
							"value": "{{$randomUUID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar un restaurante",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Sushi Express\",\n    \"direccion\": \"Avenida 10 #20-30\",\n    \"tipoCocina\": \"Japonesa\",\n    \"paginaWeb\": \"https://www.sushiexpress.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/restaurants/:id/",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"restaurants",
						":id",
						""
					],
					"variable": [
						{
							"key": "id",
							"value": "{{restaurante_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar un restaurante con datos invalidos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"   pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": null,\n    \"direccion\": \"\",\n    \"tipoCocina\": \"Invalida\",\n    \"paginaWeb\": \"invalida\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/restaurants/:id/",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"restaurants",
						":id",
						""
					],
					"variable": [
						{
							"key": "id",
							"value": "{{restaurante_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar un restaurante que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message with UUID\", function () {",
							"    const data = pm.response.json();",
							"    const regex = /^Restaurante with id [0-9a-fA-F-]{36} not found$/;",
							"",
							"    pm.expect(data.message).to.match(regex);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Sushi Express\",\n    \"direccion\": \"Avenida 10 #20-30\",\n    \"tipoCocina\": \"Japonesa\",\n    \"paginaWeb\": \"https://www.sushiexpress.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/restaurants/:id/",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"restaurants",
						":id",
						""
					],
					"variable": [
						{
							"key": "id",
							"value": "{{$randomUUID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar restaurante",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{API_URL}}/restaurants/:id/",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"restaurants",
						":id",
						""
					],
					"variable": [
						{
							"key": "id",
							"value": "{{restaurante_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar restaurante que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message with UUID\", function () {",
							"    const data = pm.response.json();",
							"    const regex = /^Restaurante with id [0-9a-fA-F-]{36} not found$/;",
							"",
							"    pm.expect(data.message).to.match(regex);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{API_URL}}/restaurants/:id/",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"restaurants",
						":id",
						""
					],
					"variable": [
						{
							"key": "id",
							"value": "{{$randomUUID}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "API_URL",
			"value": "localhost:3000/api/v1",
			"type": "string"
		}
	]
}